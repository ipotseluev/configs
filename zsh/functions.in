Yellow='\033[0;33m'       # Yellow
Green='\033[0;32m'        # Green
NC='\033[0m'              # No Color

# Compile provided .rs file into a /tmp/out.
# If compiled - run program.
function rust-test-run() {
    local FILENAME=${1}
    if ! [ -e ${FILENAME} ]; then
        echo "Usage:  FILE"
        return 1
    fi
    which rustc
    if rustc ${FILENAME} -o /tmp/out; then
        echo -e "${Green}Compilation succeed. Starting the program...${NC}\n"
        /tmp/out ${@:2}
        return 0
    fi
    echo -e "\n${Yellow}Compilation has failed${NC}"
    return 1
}

# Tries to compile the provided .rs file.
# If build fails - wait until file is updated and try again. Loop that behavior.
# If build succeeds - run the program.
function rust-test-watch() {
    local FILENAME=${1}

    # Run compiler for the first time and then check every second for updates
    rust-test-run ${FILENAME} && echo "\n${Green}Program is finished."
    echo "${Green}Waiting for updates of ${FILENAME}...${NC}"

    while true; do
        # Get the initial modification time of the file.
        initial_mod_time=$(stat -f "%m" "$FILENAME")

        while true; do
            # Get the current modification time of the file.
            current_mod_time=$(stat -f "%m" "$FILENAME")

            # Compare the current modification time to the initial modification time.
            if [[ "$current_mod_time" != "$initial_mod_time" ]]; then
                clear
                rust-test-run ${FILENAME} && echo "\n${Green}Program has finished.${NC}"
                echo "${Green}Waiting for updates of ${FILENAME}...${NC}"
                break
            fi

            # Wait for a short period before checking again.
            sleep 1
        done
    done
}
