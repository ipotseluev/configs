Yellow='\033[0;33m'       # Yellow
Green='\033[0;32m'        # Green
NC='\033[0m'              # No Color

# Compiles provided source file into a /tmp/out.
# If compilation succeeds - run /tmp/out.
function _test_run() {
    if ! [ -e ${FILENAME} ]; then
        echo "Usage:  FILE"
        return 1
    fi
    which ${COMPILIER}
    if "$@" -o /tmp/out; then
        echo -e "${Green}Compilation succeed. Starting the program...${NC}\n"
        /tmp/out ${@:2}
        return 0
    fi
    echo -e "\n${Yellow}Compilation has failed${NC}"
    return 1
}

# Compiles provided c++ source file into a /tmp/out.
# If compilation succeeds - run /tmp/out.
function cpp-test-run() {
    local FILENAME=${1}
    _test_run g++ -std=c++20 ${FILENAME}
}

# Compile provided .rs file into a /tmp/out.
# If compilation succeeds - run /tmp/out.
function rust-test-run() {
    local FILENAME=${1}
    _test_run rustc ${FILENAME}
}

# Tries to compile the provided .rs file.
# If build fails - wait until file is updated and try again. Loop that behavior.
# If build succeeds - run the program.
function rust-test-watch() {
    local FILENAME=${1}

    # Run compiler for the first time and then check every second for updates
    rust-test-run ${FILENAME} && echo "\n${Green}Program is finished."
    echo "${Green}Waiting for updates of ${FILENAME}...${NC}"

    while true; do
        # Get the initial modification time of the file.
        initial_mod_time=$(stat -f "%m" "$FILENAME")

        while true; do
            # Get the current modification time of the file.
            current_mod_time=$(stat -f "%m" "$FILENAME")

            # Compare the current modification time to the initial modification time.
            if [[ "$current_mod_time" != "$initial_mod_time" ]]; then
                clear
                rust-test-run ${FILENAME} && echo "\n${Green}Program has finished.${NC}"
                echo "${Green}Waiting for updates of ${FILENAME}...${NC}"
                break
            fi

            # Wait for a short period before checking again.
            sleep 1
        done
    done
}

# Creates backup of git repo by creating directory $2/XX.$1 and copying there repo $3
# ignoring 'target' directory, where XX - auto-incrementing index of backup, [0..99]
_backup_common() {
    local backup_name=$1
    local backup_dir=$2
    local source=$3

    if [[ -z $backup_name ]]; then
        echo "Error: Backup name is not provided."
        return 1
    fi
    echo "args: $@"

    local last_index=$(ls ${backup_dir} | grep -E '^[0-9]{2}\.[^/]+$' | sort -r | head -n1 | cut -d. -f1)
    last_backup=${last_backup:-0}
    local next_index=$(($last_index + 1))
    next_index=$(printf "%02d" $((next_index % 100))) # Format to 2 digits, roll over at 99

    local backup_path="${backup_dir}/${next_index}.${backup_name}"
    mkdir -p "$backup_path"

    # Perform the actual backup
    rsync --human-readable --archive --verbose --exclude 'target' ${source} "$backup_path"
    # if rsync fails, remove backup directory, print error and exit
    if [[ $? -ne 0 ]]; then
        rm -rf "$backup_path"
        echo "Error: rsync failed" >&2
        return 1
    fi

    echo "Backup created at $backup_path"
    echo "List of backups:"
    realpath $(dirname ${backup_path})/*
}

# Local backup function
_backup_repo() {
    _backup_common "$1" "$2" "$3"
}

# Remote backup function
_backup_remote_repo() {
    local remote_source="${4}:${3}"  # Combine remote_name and repo_dir
    _backup_common "$1" "$2" "$remote_source"
}

# Helper function to create a unified interface for both local and remote backups
_backup() {
    local backup_name=$1
    local backup_dir=$2
    local repo_dir=$3
    local remote_name=$4

    if [[ -n $remote_name ]]; then
        _backup_remote_repo "$backup_name" "$backup_dir" "$repo_dir" "$remote_name"
    else
        _backup_repo "$backup_name" "$backup_dir" "$repo_dir"
    fi
}

# Example
backup_redis() {
    local repo_dir=~/workspace/studying/codecrafters-redis-rust
    local backup_dir=~/tmp/backups/redis
    _backup "$1" ${backup_dir} ${repo_dir}
}

# Generates mac addr
alias genmac="openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'"
